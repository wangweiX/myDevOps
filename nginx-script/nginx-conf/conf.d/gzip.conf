#开启gzip模块
gzip  on;
gzip_static on;
gzip_disable "MSIE [1-6] .";
 
#设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。
#默认值是0，不管页面多大都压缩。
#建议设置成大于1k的字节数，小于1k可能会越压越大。 即: gzip_min_length 1024
gzip_min_length     1024;

#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 
#例如 4 4k	代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 
#     4 8k     代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。
gzip_buffers        4 32k;

#识别http的协议版本。由于早期的一些浏览器或者http客户端，可能不支持gzip自解压，用户就会看到乱码，所以做一些判断还是有必要的。 
#注：21世纪都来了，现在除了类似于百度的蜘蛛之类的东西不支持自解压，99.99%的浏览器基本上都支持gzip解压了，所以可以不用设这个值,保持系统默认即可。
#gzip_http_version   1.1;

# 1 ~ 9 gzip压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理最慢（传输快但比较消耗cpu）
gzip_comp_level     5;

#Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含"Via"的 header头。
gzip_proxied expired no-cache no-store private auth;
 
# 匹配MIME类型进行压缩
gzip_types   text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;

#和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，
#有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩
gzip_vary           on;